# Generated by Django 2.2.6 on 2020-02-12 09:22

from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.core.serializers.json
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import tuitions.helpers
import tuitions.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicBackground',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('institution_type', models.CharField(choices=[('school', 'School'), ('college', 'College'), ('university', 'University'), ('other', 'Other')], max_length=50, verbose_name='type of institution')),
                ('country', django_countries.fields.CountryField(blank=True, default='BD', help_text='The country where the institution is located.', max_length=2, null=True, verbose_name='country')),
                ('name_of_institution', models.CharField(blank=True, help_text='Eg: North South University, Scholastica, etc.', max_length=255, verbose_name='name of institution')),
                ('name_of_degree', models.CharField(blank=True, help_text='Eg: SSC, HSC, O-levels, A-levels,  B.Sc. in Computer Science, BBA, etc.', max_length=255, verbose_name='name of degree')),
                ('field_of_study', models.CharField(blank=True, help_text='Optional. For universities, it can be departments like Computer Science and Engineering. For schools (and colleges in Bangladesh), it can be Science, Commerce, Arts, etc.', max_length=255, verbose_name='field of study')),
                ('medium', models.CharField(blank=True, choices=[('english-medium', 'English medium'), ('bangla-medium', 'Bangla medium')], help_text='Only used in Bangladesh.', max_length=50, verbose_name='medium')),
                ('bangla_medium_version', models.CharField(blank=True, choices=[('english-version', 'English version'), ('bangla-version', 'Bangla version')], help_text='Only used in Bangladesh. Can be empty if the school/college is english medium.', max_length=50, verbose_name='bangla medium version')),
                ('english_medium_curriculum', models.CharField(blank=True, choices=[('edexcel', 'Edexcel'), ('cambridge', 'Cambridge'), ('ib', 'IB')], help_text='Only used in Bangladesh. Can be empty if the school/college is bangla medium.', max_length=50, verbose_name='english medium curriculum')),
                ('start_year', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(3000)], verbose_name='start year')),
                ('end_year', models.IntegerField(blank=True, help_text='Can be kept empty if the person still has not completed studying.', null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(3000)], verbose_name='end year')),
                ('identification_document_picture', models.URLField(blank=True, null=True, verbose_name='identification document picture')),
                ('copy', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder, help_text='Stores a copy of all the academic background fields. Used to generate the timestamp of the latest time the tutor changed the academic background section of their profile.', verbose_name='copy')),
                ('is_complete', models.BooleanField(default=False, help_text='Set to True if all the background information is provided.', verbose_name='completion status')),
                ('latest_change_timestamp', models.BigIntegerField(blank=True, help_text='Timestamp of the latest time the background informationw was changed.', null=True, verbose_name='latest change timestamp')),
            ],
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_type', models.CharField(choices=[('campus-ambassador', 'Campus Ambassador'), ('operations', 'Operations'), ('activation-manager', 'Activation manager'), ('admin', 'Admin'), ('other', 'Other')], default='other', max_length=120, verbose_name='account type')),
                ('country', django_countries.fields.CountryField(default='BD', max_length=2, verbose_name='country')),
            ],
        ),
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Required. Name of the area. Eg: Banani, Kuningan, Kuta, etc.', max_length=255, verbose_name='name')),
                ('city', models.CharField(help_text='Required. Name of the city where the area is located. Eg: Dhaka, Jakarta, Singapore, etc.', max_length=255, verbose_name='city')),
                ('zip_code', models.CharField(help_text='Required. Zip code of the area.', max_length=50, verbose_name='zip code')),
                ('state', models.CharField(blank=True, help_text="Optional. Some countries don't have states.", max_length=255, verbose_name='state')),
                ('district', models.CharField(blank=True, help_text="Optional. Some countries don't have districts.", max_length=255, verbose_name='district')),
                ('division', models.CharField(blank=True, help_text="Optional. Some countries don't have divisions.", max_length=255, verbose_name='division')),
                ('country', django_countries.fields.CountryField(default='BD', help_text='Required. Name of the country where the area is located.', max_length=2, verbose_name='country')),
                ('nearby_areas', models.ManyToManyField(blank=True, help_text='Optional. Tutors from nearby areas will pop up in the resultsif the search filters are too restrictive. Only for internal use.', related_name='_area_nearby_areas_+', to='tuitions.Area', verbose_name='nearby areas')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='OfflineSubject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Required. Name of the subject. Eg: Mathematics, Physics, Essay writing, etc.', max_length=255, verbose_name='name')),
                ('category', models.CharField(help_text='Required. Broad category of the subject. Also includes the academic mediums in applicable countries. Eg: english medium, bangla medium, test preparation, etc.', max_length=50, verbose_name='category or medium')),
                ('sub_category', models.CharField(help_text='Required. Specific sub-category of the subject. Includes the academic classes. Eg: Class 5, Class 8, SSC, HSC, O-levels, A-levels, etc.', max_length=120, verbose_name='sub-category or class')),
                ('english_medium_curriculum', models.CharField(blank=True, help_text='Optional. Only for Bangladesh. Extra filtering option needed for english medium subjects based on their curriculums.', max_length=50, verbose_name='english medium curriculum')),
                ('subject_type', models.CharField(blank=True, help_text='Type used as an extra filtering option for the API.', max_length=255, verbose_name='subject type')),
                ('country', django_countries.fields.CountryField(default='BD', help_text='Required for offline subjects.', max_length=2, verbose_name='country')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OnlineSubject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Required. Name of the subject. Eg: Mathematics, Physics, Essay writing, etc.', max_length=255, verbose_name='name')),
                ('category', models.CharField(help_text='Required. Broad category of the subject. Also includes the academic mediums in applicable countries. Eg: english medium, bangla medium, test preparation, etc.', max_length=50, verbose_name='category or medium')),
                ('sub_category', models.CharField(help_text='Required. Specific sub-category of the subject. Includes the academic classes. Eg: Class 5, Class 8, SSC, HSC, O-levels, A-levels, etc.', max_length=120, verbose_name='sub-category or class')),
                ('english_medium_curriculum', models.CharField(blank=True, help_text='Optional. Only for Bangladesh. Extra filtering option needed for english medium subjects based on their curriculums.', max_length=50, verbose_name='english medium curriculum')),
                ('country', django_countries.fields.CountryField(blank=True, default='BD', help_text='Optional. Can be empty if the subject is general and will be taught online.', max_length=2, null=True, verbose_name='country')),
                ('subject_type', models.CharField(blank=True, help_text='Type used as an extra filtering option for the API.', max_length=255, verbose_name='subject type')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Parent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True, verbose_name='UUID')),
                ('mobile_user_id', models.CharField(blank=True, max_length=255, verbose_name='mobile user ID')),
                ('full_name', models.CharField(max_length=255, verbose_name='full name')),
                ('phone_number', models.CharField(max_length=120, unique=True, verbose_name='phone number')),
                ('is_phone_number_verified', models.BooleanField(default=False, verbose_name='phone number verification status')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email')),
                ('is_email_verified', models.BooleanField(default=False, verbose_name='email verification status')),
                ('country', django_countries.fields.CountryField(default='BD', max_length=2, verbose_name='country')),
                ('points', models.BigIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='points')),
                ('sign_up_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female')], max_length=50, verbose_name='gender')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='date of birth')),
                ('display_picture', models.URLField(blank=True, help_text="Optional. Display picture of the user. Note: The picture must contain the user's face, ideally without any other faces.", max_length=2000, null=True, verbose_name='display picture')),
                ('is_social_media_connected', models.BooleanField(default=False, help_text='Set to True if the parent or student has connected their social media account. Can be used as a sort of verification status.', verbose_name='social media connection status')),
                ('name_in_social_media', models.CharField(blank=True, max_length=255, verbose_name='name in social media')),
                ('otp', models.IntegerField(blank=True, help_text='Can be used for logging in without a password, if the password is not set.', null=True, validators=[django.core.validators.MinValueValidator(111111), django.core.validators.MaxValueValidator(999999)], verbose_name='one-time password')),
                ('otp_expiry_timestamp', models.BigIntegerField(blank=True, help_text='One-time password (OTP) expiry timestamp.', null=True, verbose_name='otp expiry timestamp')),
                ('password', models.CharField(blank=True, max_length=128, verbose_name='password')),
                ('is_verified_by_ops', models.BooleanField(default=False, help_text='Set to True if the tutor has been verified by the internal operations team.', verbose_name='ops verification status')),
                ('latest_ops_verification_timestamp', models.BigIntegerField(blank=True, help_text='Timestamp of the latest time the tutor was verified by the internal operations team. Note: A failed verification is still a verification.', null=True, verbose_name='latest ops verification timestamp')),
                ('ops_notes', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=tuitions.helpers.get_default_ops_notes, encoder=django.core.serializers.json.DjangoJSONEncoder, verbose_name='ops notes')),
                ('last_active_at', models.DateTimeField(blank=True, help_text='Date of the last activity.', null=True, verbose_name='last active at')),
                ('is_suspended_by_ops', models.BooleanField(default=False, verbose_name='ops suspension status')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='deletion status')),
                ('last_confirmed_job_at', models.DateTimeField(blank=True, null=True, verbose_name='last confirmed job at')),
                ('signed_up_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tuitions_parent_related_signed_up_by', to='tuitions.Account')),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tuitions_parent_related_verified_by', to='tuitions.Account')),
            ],
            options={
                'ordering': ('-sign_up_date',),
                'abstract': False,
                'unique_together': {('phone_number', 'otp')},
            },
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('country', django_countries.fields.CountryField(default='BD', help_text='Required. Name of the country where the school is located.', max_length=2, verbose_name='country')),
            ],
        ),
        migrations.CreateModel(
            name='SiteConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_of_business', models.CharField(default='Yoda Technologies Ltd.', max_length=255, verbose_name='name of business')),
            ],
            options={
                'verbose_name': 'Site config',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True, verbose_name='UUID')),
                ('mobile_user_id', models.CharField(blank=True, max_length=255, verbose_name='mobile user ID')),
                ('full_name', models.CharField(max_length=255, verbose_name='full name')),
                ('phone_number', models.CharField(max_length=120, unique=True, verbose_name='phone number')),
                ('is_phone_number_verified', models.BooleanField(default=False, verbose_name='phone number verification status')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email')),
                ('is_email_verified', models.BooleanField(default=False, verbose_name='email verification status')),
                ('country', django_countries.fields.CountryField(default='BD', max_length=2, verbose_name='country')),
                ('points', models.BigIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='points')),
                ('sign_up_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female')], max_length=50, verbose_name='gender')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='date of birth')),
                ('display_picture', models.URLField(blank=True, help_text="Optional. Display picture of the user. Note: The picture must contain the user's face, ideally without any other faces.", max_length=2000, null=True, verbose_name='display picture')),
                ('is_social_media_connected', models.BooleanField(default=False, help_text='Set to True if the parent or student has connected their social media account. Can be used as a sort of verification status.', verbose_name='social media connection status')),
                ('name_in_social_media', models.CharField(blank=True, max_length=255, verbose_name='name in social media')),
                ('otp', models.IntegerField(blank=True, help_text='Can be used for logging in without a password, if the password is not set.', null=True, validators=[django.core.validators.MinValueValidator(111111), django.core.validators.MaxValueValidator(999999)], verbose_name='one-time password')),
                ('otp_expiry_timestamp', models.BigIntegerField(blank=True, help_text='One-time password (OTP) expiry timestamp.', null=True, verbose_name='otp expiry timestamp')),
                ('password', models.CharField(blank=True, max_length=128, verbose_name='password')),
                ('is_verified_by_ops', models.BooleanField(default=False, help_text='Set to True if the tutor has been verified by the internal operations team.', verbose_name='ops verification status')),
                ('latest_ops_verification_timestamp', models.BigIntegerField(blank=True, help_text='Timestamp of the latest time the tutor was verified by the internal operations team. Note: A failed verification is still a verification.', null=True, verbose_name='latest ops verification timestamp')),
                ('ops_notes', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=tuitions.helpers.get_default_ops_notes, encoder=django.core.serializers.json.DjangoJSONEncoder, verbose_name='ops notes')),
                ('last_active_at', models.DateTimeField(blank=True, help_text='Date of the last activity.', null=True, verbose_name='last active at')),
                ('is_suspended_by_ops', models.BooleanField(default=False, verbose_name='ops suspension status')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='deletion status')),
                ('signed_up_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tuitions_student_related_signed_up_by', to='tuitions.Account')),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tuitions_student_related_verified_by', to='tuitions.Account')),
            ],
            options={
                'ordering': ('-sign_up_date',),
                'abstract': False,
                'unique_together': {('phone_number', 'otp')},
            },
        ),
        migrations.CreateModel(
            name='UniversityDegree',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
            ],
        ),
        migrations.CreateModel(
            name='UniversityFieldOfStudy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
            ],
            options={
                'verbose_name_plural': 'university fields of study',
            },
        ),
        migrations.CreateModel(
            name='University',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Required. Name of the university. Eg: North South University, Boston University, National University of Singapore, etc.', max_length=255, verbose_name='name')),
                ('grade', models.IntegerField(blank=True, choices=[(1, 'Top grade'), (2, 'Medium grade'), (3, 'Bottom grade')], help_text='Optional. Determines the level of university in terms of education quality and prestige. Only for internal use.', null=True, verbose_name='grade')),
                ('addresses', models.TextField(blank=True, help_text='Optional. Exact addresses of the universities. For multiple addresses, please separate them using new lines.', verbose_name='addresses')),
                ('country', django_countries.fields.CountryField(default='BD', help_text='Required. Name of the country where the university is located.', max_length=2, verbose_name='country')),
                ('areas', models.ManyToManyField(blank=True, help_text='Areas where branches of the university is located.', related_name='universities', to='tuitions.Area', verbose_name='areas')),
                ('similar_universities', models.ManyToManyField(blank=True, help_text='Optional. Tutors from similar universities will pop up in the results if the search filters are too restrictive. Only for internal use.', related_name='_university_similar_universities_+', to='tuitions.University', verbose_name='similar universities')),
            ],
            options={
                'verbose_name_plural': 'universities',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Tutor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True, verbose_name='UUID')),
                ('mobile_user_id', models.CharField(blank=True, max_length=255, verbose_name='mobile user ID')),
                ('full_name', models.CharField(max_length=255, verbose_name='full name')),
                ('phone_number', models.CharField(max_length=120, unique=True, verbose_name='phone number')),
                ('is_phone_number_verified', models.BooleanField(default=False, verbose_name='phone number verification status')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email')),
                ('is_email_verified', models.BooleanField(default=False, verbose_name='email verification status')),
                ('country', django_countries.fields.CountryField(default='BD', max_length=2, verbose_name='country')),
                ('points', models.BigIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='points')),
                ('sign_up_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female')], max_length=50, verbose_name='gender')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='date of birth')),
                ('display_picture', models.URLField(blank=True, help_text="Optional. Display picture of the user. Note: The picture must contain the user's face, ideally without any other faces.", max_length=2000, null=True, verbose_name='display picture')),
                ('is_social_media_connected', models.BooleanField(default=False, help_text='Set to True if the parent or student has connected their social media account. Can be used as a sort of verification status.', verbose_name='social media connection status')),
                ('name_in_social_media', models.CharField(blank=True, max_length=255, verbose_name='name in social media')),
                ('otp', models.IntegerField(blank=True, help_text='Can be used for logging in without a password, if the password is not set.', null=True, validators=[django.core.validators.MinValueValidator(111111), django.core.validators.MaxValueValidator(999999)], verbose_name='one-time password')),
                ('otp_expiry_timestamp', models.BigIntegerField(blank=True, help_text='One-time password (OTP) expiry timestamp.', null=True, verbose_name='otp expiry timestamp')),
                ('password', models.CharField(blank=True, max_length=128, verbose_name='password')),
                ('is_verified_by_ops', models.BooleanField(default=False, help_text='Set to True if the tutor has been verified by the internal operations team.', verbose_name='ops verification status')),
                ('latest_ops_verification_timestamp', models.BigIntegerField(blank=True, help_text='Timestamp of the latest time the tutor was verified by the internal operations team. Note: A failed verification is still a verification.', null=True, verbose_name='latest ops verification timestamp')),
                ('ops_notes', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=tuitions.helpers.get_default_ops_notes, encoder=django.core.serializers.json.DjangoJSONEncoder, verbose_name='ops notes')),
                ('last_active_at', models.DateTimeField(blank=True, help_text='Date of the last activity.', null=True, verbose_name='last active at')),
                ('is_suspended_by_ops', models.BooleanField(default=False, verbose_name='ops suspension status')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='deletion status')),
                ('old_slug', models.SlugField(blank=True)),
                ('sign_up_channel', models.CharField(blank=True, choices=[('activation', 'Activation'), ('campus-ambassador', 'Campus Ambassador'), ('referral', 'Referral'), ('direct', 'Direct')], max_length=255, verbose_name='sign-up channel')),
                ('number_of_public_profile_views', models.BigIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='number of public profile views')),
                ('undergraduate_university_id_number', models.CharField(blank=True, max_length=255, verbose_name='undergraduate university id number')),
                ('undergraduate_university_identification_document_picture', models.URLField(blank=True, null=True, verbose_name='undergraduate university identification document picture')),
                ('academic_medium', models.CharField(blank=True, choices=[('english-medium', 'English medium'), ('bangla-medium', 'Bangla medium')], help_text='Only used in Bangladesh.', max_length=50, verbose_name='academic medium')),
                ('academic_field_of_study', models.CharField(blank=True, choices=[('engineering', 'Engineering'), ('business', 'Business'), ('english', 'English'), ('health-sciences', 'Health Sciences'), ('law', 'Law'), ('economics', 'Economics')], help_text='Optional. Mainly used for filtering.', max_length=120, verbose_name='academic field of study')),
                ('about', models.TextField(blank=True, help_text='Write a short text to let everyone know why you are special. Minimum 150 characters.', validators=[django.core.validators.MinLengthValidator(150)], verbose_name='describe yourself')),
                ('government_id_type', models.CharField(blank=True, choices=[('nid', 'NID'), ('passport', 'Passport'), ('driving-license', 'Driving license'), ('birth-certificate', 'Birth certificate')], help_text='Select your identification document type.', max_length=50, verbose_name='government ID type')),
                ('government_id_number', models.CharField(blank=True, help_text='Enter the unique number of your identification document.', max_length=255, verbose_name='government ID number')),
                ('government_id_picture', models.URLField(blank=True, null=True, verbose_name='government ID picture')),
                ('personal_information_copy', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder, help_text='Stores a copy of all the personal information fields. Used to generate the timestamp of the latest time the tutor changed the personal information section of their profile.', verbose_name='personal information copy')),
                ('is_personal_information_complete', models.BooleanField(default=False, help_text='Set to True if the tutor has completed the personal information section of their profile.', verbose_name='personal information completion status')),
                ('latest_personal_information_change_timestamp', models.BigIntegerField(blank=True, help_text='Timestamp of the latest time the tutor changed the personal information section of their profile.', null=True, verbose_name='latest personal information change timestamp')),
                ('wants_to_teach_offline', models.BooleanField(default=True, help_text='Set to True if the tutor wants to teach offline tuitions.', verbose_name='wants to teach offline')),
                ('wants_to_teach_online', models.BooleanField(default=False, help_text='Set to True if the tutor wants to teach online.', verbose_name='wants to teach online')),
                ('online_hourly_rate', models.DecimalField(blank=True, decimal_places=2, help_text='The currency is the same as the country of the tutor.', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='online hourly rate')),
                ('schedule', django.contrib.postgres.fields.ArrayField(base_field=models.BooleanField(), default=tuitions.helpers.get_empty_schedule_array, size=21)),
                ('schedule_is_flexible', models.BooleanField(default=True)),
                ('salary_range_start', models.DecimalField(blank=True, decimal_places=2, help_text='The currency is the same as the country of the tutor.', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='salary range start')),
                ('salary_range_end', models.DecimalField(blank=True, decimal_places=2, help_text='The currency is the same as the country of the tutor.', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='salary range end')),
                ('is_teaching_preferences_complete', models.BooleanField(default=False, help_text='Set to True if all the teaching preferences is provided.', verbose_name='teaching preferences completion status')),
                ('date_till_premium_account_valid', models.DateTimeField(default=tuitions.helpers.get_default_date_till_premium_account_valid, verbose_name='date till premium account valid')),
                ('time_to_activate_premium_with_sign_up', models.DateTimeField(blank=True, null=True, verbose_name='time to activate premium with sign up')),
                ('daily_direct_requests_accepted', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder, help_text='Stores a dictionary where the keys are days, and the values are the number of directed reqeusts accepted that day.', verbose_name='daily direct requests accepted')),
                ('monthly_direct_requests_accepted', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder, help_text='Stores a dictionary where the keys are months, and the values are the number of directed reqeusts accepted that month.', verbose_name='monthly direct requests accepted')),
                ('daily_hot_jobs_applied', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder, help_text='Stores a dictionary where the keys are days, and the values are the number of hot jobs the tutor applied to that day.', verbose_name='daily hot jobs applied')),
                ('monthly_hot_jobs_applied', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder, help_text='Stores a dictionary where the keys are months, and the values are the number of hot jobs the tutor applied to that month.', verbose_name='monthly hot jobs applied')),
                ('last_hot_job_received_at', models.DateTimeField(blank=True, null=True, verbose_name='last hot job received at')),
                ('last_applied_to_job_at', models.DateTimeField(blank=True, null=True, verbose_name='last applied to job at')),
                ('premium_type', models.CharField(choices=[('free', 'free'), ('paid', 'paid')], default='free', max_length=255, verbose_name='premium type')),
                ('tutor_behavior', models.BigIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='tutor behavior')),
                ('way_of_teaching', models.BigIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='way of teaching')),
                ('communication_skills', models.BigIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='communication skills')),
                ('time_management', models.BigIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='time management')),
                ('number_of_reviews', models.BigIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='number of reviews')),
                ('m2m_fields_serialized', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder, verbose_name='M2M fields serialized')),
                ('offline_preferred_teaching_subjects_arr', django.contrib.postgres.fields.ArrayField(base_field=models.BigIntegerField(), blank=True, default=tuitions.models.get_empty_list, help_text='Used for searching.', null=True, size=None)),
                ('offline_preferred_teaching_areas_arr', django.contrib.postgres.fields.ArrayField(base_field=models.BigIntegerField(), blank=True, default=tuitions.models.get_empty_list, help_text='Used for searching.', null=True, size=None)),
                ('random_1', models.SmallIntegerField(default=tuitions.helpers.get_random_for_tutor_filter)),
                ('random_2', models.SmallIntegerField(default=tuitions.helpers.get_random_for_tutor_filter)),
                ('random_3', models.SmallIntegerField(default=tuitions.helpers.get_random_for_tutor_filter)),
                ('college_academic_bg', models.ForeignKey(blank=True, help_text='Only for use in Bangladesh.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tutors_with_college_academic_bg', to='tuitions.AcademicBackground', verbose_name='college academic background')),
                ('home_area', models.ForeignKey(blank=True, help_text='Select the area where you currently live.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tutors_with_home_area', to='tuitions.Area', verbose_name='home area')),
                ('offline_preferred_teaching_areas', models.ManyToManyField(blank=True, related_name='tutors_with_offline_preferred_teaching_areas', to='tuitions.Area')),
                ('offline_preferred_teaching_subjects', models.ManyToManyField(blank=True, related_name='tutors_with_offline_preferred_teaching_subjects', to='tuitions.OfflineSubject')),
                ('online_preferred_teaching_subjects', models.ManyToManyField(blank=True, related_name='tutors_with_online_preferred_teaching_subjects', to='tuitions.OnlineSubject')),
                ('school_academic_bg', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tutors_with_school_academic_bg', to='tuitions.AcademicBackground', verbose_name='school academic background')),
                ('signed_up_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tuitions_tutor_related_signed_up_by', to='tuitions.Account')),
                ('undergraduate_university', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tutors_with_undergraduate_university', to='tuitions.University', verbose_name='undergraduate university')),
                ('undergraduate_university_academic_bg', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tutors_with_undergraduate_university_academic_bg', to='tuitions.AcademicBackground', verbose_name='undergraduate university academic background')),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tuitions_tutor_related_verified_by', to='tuitions.Account')),
            ],
            options={
                'ordering': ('-sign_up_date',),
                'abstract': False,
                'unique_together': {('phone_number', 'otp')},
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True, verbose_name='UUID')),
                ('created_for', models.CharField(choices=[('parent', 'Parent'), ('student', 'Student'), ('tutor', 'Tutor')], max_length=50, verbose_name='created for')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('valid_till', models.DateTimeField(blank=True, null=True, verbose_name='valid_till')),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='total amount')),
                ('amount_retained_by_yoda', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='amount retained by Yoda')),
                ('currency', models.CharField(max_length=50, verbose_name='currency')),
                ('trx_id', models.CharField(max_length=50, verbose_name='trx id')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('vendor_name', models.CharField(blank=True, max_length=255, verbose_name='vendor name')),
                ('raw_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder, verbose_name='raw data')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='parent_transactions', to='tuitions.Parent')),
                ('student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='student_transactions', to='tuitions.Student')),
                ('tutor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tutor_transactions', to='tuitions.Tutor')),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='SMSLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True, verbose_name='UUID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('message', models.TextField(verbose_name='message')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='parent_sms_logs', to='tuitions.Parent')),
                ('student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='student_sms_logs', to='tuitions.Student')),
                ('tutor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tutor_sms_logs', to='tuitions.Tutor')),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True, verbose_name='UUID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('tutor_behavior', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='tutor behavior')),
                ('way_of_teaching', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='way of teaching')),
                ('communication_skills', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='communication skills')),
                ('time_management', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='time management')),
                ('copy', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder, help_text='Stores a copy of all the scores.', verbose_name='copy')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parent_reviews', to='tuitions.Parent')),
                ('tutor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tutor_reviews', to='tuitions.Tutor')),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='RequestForTutor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True, verbose_name='UUID')),
                ('created_at', models.DateTimeField(verbose_name='created at')),
                ('updated_at', models.DateTimeField(verbose_name='updated at')),
                ('data_origin', models.CharField(choices=[('old', 'old'), ('new', 'new')], default='old', max_length=255, verbose_name='data origin')),
                ('note_by_parent', models.TextField(blank=True, verbose_name='note by parent')),
                ('student_gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], max_length=50, verbose_name='student gender')),
                ('student_school', models.CharField(blank=True, max_length=255, verbose_name='student school')),
                ('student_class', models.CharField(max_length=255, verbose_name='student class')),
                ('student_medium', models.CharField(blank=True, choices=[('english-medium', 'English medium'), ('bangla-medium', 'Bangla medium')], help_text='Only used in Bangladesh.', max_length=50, verbose_name='student medium')),
                ('student_bangla_medium_version', models.CharField(blank=True, choices=[('english-version', 'English version'), ('bangla-version', 'Bangla version')], help_text='Only used in Bangladesh. Can be empty if the school/college is english medium.', max_length=50, verbose_name='student bangla medium version')),
                ('student_english_medium_curriculum', models.CharField(blank=True, choices=[('edexcel', 'Edexcel'), ('cambridge', 'Cambridge'), ('ib', 'IB')], help_text='Only used in Bangladesh. Can be empty if the school/college is bangla medium.', max_length=50, verbose_name='student english medium curriculum')),
                ('teaching_place_preference', models.CharField(choices=[('at-students-place', "At student's place"), ('at-tutors-place', "At tutor's place"), ('online', 'Online'), ('any', 'Any')], max_length=50, verbose_name='teaching place preference')),
                ('number_of_days_per_week', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)], verbose_name='number of days per week')),
                ('salary', models.DecimalField(decimal_places=2, help_text="The currency is the same as the parent's country.", max_digits=12, verbose_name='salary')),
                ('is_salary_negotiable', models.BooleanField(default=True, verbose_name='is salary negotiable')),
                ('is_rejected_by_ops', models.BooleanField(default=False, verbose_name='ops rejection status')),
                ('confirmation_date', models.DateTimeField(blank=True, null=True, verbose_name='confirmation date')),
                ('ops_notes', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=tuitions.helpers.get_default_ops_notes, encoder=django.core.serializers.json.DjangoJSONEncoder, verbose_name='ops notes')),
                ('country', django_countries.fields.CountryField(default='BD', max_length=2, verbose_name='country')),
                ('tutor_gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female')], help_text='If there is no gender preference, this can be kept empty.', max_length=50, verbose_name='tutor gender')),
                ('tutor_academic_medium', models.CharField(blank=True, choices=[('english-medium', 'English medium'), ('bangla-medium', 'Bangla medium')], help_text='Only used in Bangladesh. If any medium is preferred, this can be kept empty.', max_length=50, verbose_name='tutor academic medium')),
                ('tutor_academic_field_of_study', models.CharField(blank=True, choices=[('engineering', 'Engineering'), ('business', 'Business'), ('english', 'English'), ('health-sciences', 'Health Sciences'), ('law', 'Law'), ('economics', 'Economics')], help_text='Optional. Mainly used for filtering.', max_length=120, verbose_name='tutor academic field of study')),
                ('is_confirmed', models.BooleanField(default=False, verbose_name='confirmation status')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tuitions_requestfortutor_related', to='tuitions.Parent', verbose_name='parent')),
                ('subjects', models.ManyToManyField(related_name='tuitions_requestfortutor_related', to='tuitions.OfflineSubject')),
                ('tuition_area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tuitions_requestfortutor_related', to='tuitions.Area', verbose_name='tuition area')),
                ('tutor_undergraduate_university', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tuitions_requestfortutor_related', to='tuitions.University')),
            ],
            options={
                'ordering': ('-created_at',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(blank=True, help_text='Can be used to sort notifications into groups if needed.', max_length=255, verbose_name='notification type')),
                ('created_for', models.CharField(choices=[('parent', 'Parent'), ('student', 'Student'), ('tutor', 'Tutor')], max_length=50, verbose_name='created for')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('body', models.TextField(verbose_name='body')),
                ('url', models.URLField(blank=True, null=True, verbose_name='url')),
                ('create_extra_notifications', models.BooleanField(default=False, help_text='If this is True, extra notifications will be created during the save process. These include mobile app push notifications, emails, and text messages to the phone numbers of the users.')),
                ('is_read', models.BooleanField(default=False, verbose_name='read status')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='parent_notifications', to='tuitions.Parent')),
                ('student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='student_notifications', to='tuitions.Student')),
                ('tutor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tutor_notifications', to='tuitions.Tutor')),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.AddField(
            model_name='account',
            name='university',
            field=models.ForeignKey(blank=True, help_text='Optional. Must be set for campus ambassadors so that they can get access to the tutor sign up forms.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='accounts_with_university', to='tuitions.University', verbose_name='university'),
        ),
        migrations.AddField(
            model_name='account',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='account', to=settings.AUTH_USER_MODEL, verbose_name='user'),
        ),
        migrations.CreateModel(
            name='TuitionRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True, verbose_name='UUID')),
                ('created_at', models.DateTimeField(verbose_name='created at')),
                ('updated_at', models.DateTimeField(verbose_name='updated at')),
                ('data_origin', models.CharField(choices=[('old', 'old'), ('new', 'new')], default='old', max_length=255, verbose_name='data origin')),
                ('note_by_parent', models.TextField(blank=True, verbose_name='note by parent')),
                ('student_gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], max_length=50, verbose_name='student gender')),
                ('student_school', models.CharField(blank=True, max_length=255, verbose_name='student school')),
                ('student_class', models.CharField(max_length=255, verbose_name='student class')),
                ('student_medium', models.CharField(blank=True, choices=[('english-medium', 'English medium'), ('bangla-medium', 'Bangla medium')], help_text='Only used in Bangladesh.', max_length=50, verbose_name='student medium')),
                ('student_bangla_medium_version', models.CharField(blank=True, choices=[('english-version', 'English version'), ('bangla-version', 'Bangla version')], help_text='Only used in Bangladesh. Can be empty if the school/college is english medium.', max_length=50, verbose_name='student bangla medium version')),
                ('student_english_medium_curriculum', models.CharField(blank=True, choices=[('edexcel', 'Edexcel'), ('cambridge', 'Cambridge'), ('ib', 'IB')], help_text='Only used in Bangladesh. Can be empty if the school/college is bangla medium.', max_length=50, verbose_name='student english medium curriculum')),
                ('teaching_place_preference', models.CharField(choices=[('at-students-place', "At student's place"), ('at-tutors-place', "At tutor's place"), ('online', 'Online'), ('any', 'Any')], max_length=50, verbose_name='teaching place preference')),
                ('number_of_days_per_week', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)], verbose_name='number of days per week')),
                ('salary', models.DecimalField(decimal_places=2, help_text="The currency is the same as the parent's country.", max_digits=12, verbose_name='salary')),
                ('is_salary_negotiable', models.BooleanField(default=True, verbose_name='is salary negotiable')),
                ('is_rejected_by_ops', models.BooleanField(default=False, verbose_name='ops rejection status')),
                ('confirmation_date', models.DateTimeField(blank=True, null=True, verbose_name='confirmation date')),
                ('ops_notes', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=tuitions.helpers.get_default_ops_notes, encoder=django.core.serializers.json.DjangoJSONEncoder, verbose_name='ops notes')),
                ('country', django_countries.fields.CountryField(default='BD', max_length=2, verbose_name='country')),
                ('status', models.CharField(choices=[('direct-request', 'Direct request'), ('hot-job', 'Hot job'), ('in-process', 'In process'), ('waiting-for-parent', 'Waiting for parent'), ('waiting-for-tutor', 'Waiting for tutor'), ('confirmed', 'Confirmed')], max_length=50, verbose_name='status')),
                ('is_rejected_by_tutor', models.BooleanField(default=False, verbose_name='tutor rejection status')),
                ('find_similar_tutors_for_parent', models.BooleanField(default=True, help_text='Only needed for direct requests.', verbose_name='find similar tutors for parent')),
                ('notification_created', models.BooleanField(default=False)),
                ('job_origin', models.CharField(choices=[('direct-request', 'Direct request'), ('hot-job', 'Hot job')], default='direct-request', help_text='Must be set to "hot-job" for jobs which are converted from RFTs.', max_length=50, verbose_name='job origin')),
                ('show_tutors_phone_number', models.BooleanField(default=True, verbose_name='show tutors phone number')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tuitions_tuitionrequest_related', to='tuitions.Parent', verbose_name='parent')),
                ('parent_rft', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tuition_requests', to='tuitions.RequestForTutor')),
                ('review', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tuitions.Review')),
                ('subjects', models.ManyToManyField(related_name='tuitions_tuitionrequest_related', to='tuitions.OfflineSubject')),
                ('tuition_area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tuitions_tuitionrequest_related', to='tuitions.Area', verbose_name='tuition area')),
                ('tutor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tutor_tuition_requests', to='tuitions.Tutor')),
            ],
            options={
                'ordering': ('-created_at',),
                'abstract': False,
                'unique_together': {('tutor', 'parent_rft')},
            },
        ),
    ]
